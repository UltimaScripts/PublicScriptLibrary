import clr
from Assistant import Engine
from ClassicAssist.UO.Data import Layer
import System
clr.AddReference('IronPython.Wpf')
clr.AddReference("System.Core")
clr.AddReference("System.Windows.Forms")
clr.ImportExtensions(System.Linq)
from System import Uri, TimeSpan, Enum, Action, Convert, Math, Array
from System.Windows import Window, ResourceDictionary, SizeToContent
from System.Windows.Controls import ListBoxItem
from System.Windows.Markup import XamlReader
from System.Windows.Threading import DispatcherTimer, Dispatcher
from System.Threading import Thread, ThreadStart, ApartmentState
from System.Threading.Tasks import Task
from ClassicAssist.UO.Commands import GetTargetInfoAsync
from ClassicAssist.UO.Objects import Item
from System.Globalization import CultureInfo
from System.Windows.Forms import SaveFileDialog
from System.Collections.Generic import Dictionary

xaml = """
<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Margin="10">
	<Grid.ColumnDefinitions>
		<ColumnDefinition Width="*"/>
		<ColumnDefinition Width="*"/>
	</Grid.ColumnDefinitions>
	<Grid.RowDefinitions>
		<RowDefinition Height="Auto"/>
		<RowDefinition Height="*"/>
		<RowDefinition Height="Auto"/>
		<RowDefinition Height="Auto"/>
	</Grid.RowDefinitions>
	<TextBlock x:Name="itemListCount" Text="Item List: 0" Grid.Column="0" Grid.Row="0"/>
	<TextBlock Text="Current Object" Grid.Column="1" Grid.Row="0"/>
	<ListBox x:Name="leftList" Grid.Row="1" Grid.Column="0" Margin="0,10,10,10"/>
	<ListBox x:Name="rightList" Grid.Row="1" Grid.Column="1" Margin="0,10,0,10"/>
	<Button x:Name="addItemButton" Grid.Row="2" Grid.Column="0" Content="Add an item to the list" Margin="0,0,10,0"/>
	<Button x:Name="addContainerButton" Grid.Row="2" Grid.Column="1" Content="Add an entire container"/>
	<Button x:Name="exportListButton" Content="Export the list" Grid.ColumnSpan="2" Grid.Row="3" Margin="0,10,0,0"/>
</Grid>
"""

class ExportItem(ListBoxItem):
	def __init__(self, item):
		self.Item = item

class XamlWindow(Window):
	def __init__(self):
		rd = ResourceDictionary()
		rd.Source = Uri("pack://application:,,,/ClassicAssist.Shared;component/Resources/DarkTheme.xaml")
		self.Resources.MergedDictionaries.Add(rd)
		self.Background = self.Resources["ThemeWindowBackgroundBrush"]		
		self.Foreground = self.Resources["ThemeForegroundBrush"]		
		self.dispatcher = Dispatcher.CurrentDispatcher
		
		self.Content = XamlReader.Parse(xaml)
		self.Title = "Auction Maker Clone"
		self.Topmost = True
		#self.SizeToContent = SizeToContent.Height
		self.Height = 400
		self.Width = 500;
		
		self.leftList = self.Content.FindName('leftList')
		self.leftList.SelectionChanged += self.onSelectChanged
		
		self.rightList = self.Content.FindName('rightList')
		
		self.addItemButton = self.Content.FindName('addItemButton')
		self.addItemButton.Click += self.onAddItemClick	
		
		self.addContainerButton = self.Content.FindName('addContainerButton')
		self.addContainerButton.Click += self.onAddContainerClick
		
		self.itemListCount = self.Content.FindName('itemListCount')
		self.exportListButton = self.Content.FindName('exportListButton')
		self.exportListButton.Click += self.onExportList
		
	def onExportList(self, sender, event):
		lines = []
		items = []
		for i in self.leftList.Items:
			items.append(i.Tag)
		lastOwner = 0
		for i in items.OrderBy(lambda i: i.Owner):
			arr = []
			if i.Owner != lastOwner:
				lines.append('BAG ' + intToEUO(i.Owner))
				lastOwner = i.Owner
			line = '$'
			for p in i.Properties:
				arr.append(CultureInfo.CurrentCulture.TextInfo.ToTitleCase(p.Text))
			line = line.join(arr)
			lines.append(line)
			
		
		ofd = SaveFileDialog()
		ofd.InitialDirectory = Engine.StartupPath
		result = ofd.ShowDialog()
		if result.ToString() == 'OK':
			try:
				f = open(ofd.FileName, "w")
				for line in lines:
					f.write(line + '\n')
				f.close()
				
				
			except Exception as e:
				print e
		
	def onAddContainerClick(self, sender, event):
		task = GetTargetInfoAsync().ContinueWith.Overloads[Action[Task]](lambda t: self.dispatcher.Invoke(lambda: self.addContainer(t)))
		
	def addContainer(self, t):
		_, _, serial, x, y, z, itemid = t.Result
		item = Engine.Items.GetItem(serial)
		if item != None and item.Container != None:
			for x in item.Container.GetItems():
				lbi = ListBoxItem()
				lbi.Content = x.Name
				lbi.Tag = x
				self.leftList.Items.Add(lbi)
				self.itemListCount.Text = "Item List: " + str(self.leftList.Items.Count)
					
	def onAddItemClick(self, sender, event):
		task = GetTargetInfoAsync().ContinueWith.Overloads[Action[Task]](lambda t: self.dispatcher.Invoke(lambda: self.addItem(t)))
						
	def addItem(self, t):
		_, _, serial, x, y, z, itemid = t.Result
		item = Engine.Items.GetItem(serial)
		lbi = ListBoxItem()
		lbi.Content = item.Name
		lbi.Tag = item
		self.leftList.Items.Add(lbi)
		self.itemListCount.Text = "Item List: " + str(self.leftList.Items.Count)
		
	def onSelectChanged(self, sender, event):
		item = self.leftList.SelectedItem 
		if item != None:
			self.rightList.Items.Clear()
			for p in item.Tag.Properties:
				self.rightList.Items.Add(CultureInfo.CurrentCulture.TextInfo.ToTitleCase(p.Text))			
		
def ShowWindow():
    try:
        c = XamlWindow()
        c.ShowDialog()
    except Exception as e:
    	# if you don't catch these, an exception will likely take down CUO/CA
        print e
        
def intToEUO(serial):
    output = ''

    i = ( serial ^ 69 ) + 7;
    x = i;

    while x > 0:
        output = output + str(Convert.ToChar( int(x % 26 + 65) ))
        x = Math.Floor.Overloads[float]( x / 26 );

    return output


t = Thread(ThreadStart(ShowWindow))
t.SetApartmentState(ApartmentState.STA)
t.Start()

print 'Window Opening'

t.Join()        

print 'Window Closing'