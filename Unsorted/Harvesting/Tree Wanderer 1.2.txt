from ClassicAssist.UO.Data import Statics, TileFlags
from ClassicAssist.UO import UOMath
from Assistant import Engine
from System import Convert
from Assistant import Engine
from ClassicAssist.UO import UOMath
from ClassicAssist.UO.Data import Direction
import System
import clr
clr.AddReference('System.Core')
clr.ImportExtensions(System.Linq)

#\/__OPTIONS__\/
maxcarryweight = 450
#set boardsbag to 0 if you don't want to place boards in a container
boardsbag = 0x400c4549
#set avgserversavetime to the ms it takes your shard to save
avgserversavetime = 2000
#/\__OPTIONS__/\
axes = [0xf45]
treeTypes = [0xcd8,0xcd3,0xce6,0xce3,0xcd0,0xccd,0xcda,0xcdd,0xce0]
logs = [0x1bdd,0x07da,0x04a7,0x04a8,0x04a9,0x04aa,0x047f]
boards = [0x1bd7]
treeignorelist = []

def check_hand():
	SetQuietMode(True)
	if not FindLayer("TwoHanded"):
		for axetype in axes:
			if FindType(axetype, -1, 'backpack'):
				EquipItem('found', "TwoHanded") 
				Pause(750)
			else:
				SysMessage("No Axes, Halting")
				Stop()
	SetQuietMode(False)

def GetNearestTree():
	trees = []

	for x in range(Engine.Player.X-16, Engine.Player.X+16):
		for y in range(Engine.Player.Y-16, Engine.Player.Y+16):
			statics = Statics.GetStatics(Convert.ChangeType(Engine.Player.Map, int), x, y)
			if statics != None:
				for s in statics:
					if treeTypes.Contains(s.ID):
						ctlx = str(s.X)
						ctly = str(s.Y)
						ctl = (ctlx + "," + ctly)
						if ctl not in treeignorelist:
							trees.append({'X': s.X, 'Y': s.Y, 'Z': s.Z, 'ID': s.ID, 'Distance': UOMath.Distance(Engine.Player.X, Engine.Player.Y, s.X, s.Y)})
	return trees.OrderBy(lambda i: i['Distance']).FirstOrDefault()

def Impassable(x, y, map = int(Engine.Player.Map)):
    staticTiles = Statics.GetStatics( map, x, y )
    
    for x in staticTiles:
        if x.Flags.HasFlag(TileFlags.Impassable):
            return True

    return False

def move_tree():
	validloc = []
	for x in range(tree['X']-2, tree['X']+2):
		for y in range(tree['Y']-2, tree['Y']+2):
			if not Impassable(x, y, 0):
				validloc.append({'X': x, 'Y': y, 'Distance': UOMath.Distance(Engine.Player.X, Engine.Player.Y, x, y)})
	validtile = validloc.OrderBy(lambda i: i['Distance']).FirstOrDefault()
	Pathfind(validtile['X'], validtile['Y'], 0)
	Stop()
	if tree != None:
		if tree['X'] > Engine.Player.X and tree['Y'] > Engine.Player.Y:
			locx = (tree['X'] - 1)
			locy = (tree['Y'] - 1)
		elif tree['X'] > Engine.Player.X and tree['Y'] == Engine.Player.Y:
			locx = (tree['X'] - 1)
			locy = tree['Y']
		elif tree['X'] > Engine.Player.X and tree['Y'] < Engine.Player.Y:
			locx = (tree['X'] - 1)
			locy = (tree['Y'] + 1)
		elif tree['X'] == Engine.Player.X and tree['Y'] < Engine.Player.Y:
			locx = tree['X']
			locy = (tree['Y'] + 1)
		elif tree['X'] < Engine.Player.X and tree['Y'] < Engine.Player.Y:
			locx = (tree['X'] + 1)
			locy = (tree['Y'] + 1)
		elif tree['X'] < Engine.Player.X and tree['Y'] == Engine.Player.Y:
			locx = (tree['X'] + 1)
			locy = tree['Y']
		elif tree['X'] < Engine.Player.X and tree['Y'] > Engine.Player.Y:
			locx = (tree['X'] + 1)
			locy = (tree['Y'] - 1)
			if Impassable(locx, locy, 0):
				locx = (tree['X'] + 2)
				locy = (tree['Y'] - 2)
				if Impassable(locx, locy, 0):
					locx = X("self")
					locy = Y("self")
		elif tree['X'] == Engine.Player.X and tree['Y'] > Engine.Player.Y:
			locx = tree['X']
			locy = (tree['Y'] - 1)
		else:
			SysMessage("Something went wrong", 'self')
			Stop()
	#else:
	#	SysMessage("Error no tree, Halting")
	#	Stop()

	if locx == tree['X'] and locy == tree['Y']:
		SysMessage("dumb, Halting")
		Stop()
	#This is dogshit and needs fix
	Pathfind(locx, locy, 0)
	while Engine.Player.X != locx and Engine.Player.Y != locy:
		Pathfind(locx, locy, 0)
		Pause(2000)

def chop_tree():
	while not Dead("self"):
		CancelTarget()
		Pause(100)
		UseLayer("TwoHanded")
		WaitForTarget(5000)
		TargetXYZ(tree['X'], tree['Y'], tree['Z'], tree['ID'])
		SetTimer("backuptimer", 0)
		ClearJournal()
		while not Dead("self"):
			#sometimes it fails to read if skill info is sent too fast
			Pause(400)
			if Timer("backuptimer") > 4000:
				ClearJournal()
				Pause(600)
				break
			if InJournal("You chop some") or InJournal("fail to produce"):
				ClearJournal()
				Pause(600)
				break
			if InJournal("not enough wood") or InJournal("Target cannot be") or InJournal("is too far") or InJournal("use an axe on"):
				#This breaks here
				ix = str(tree['X'])
				iy = str(tree['Y']) 
				it = ix + "," + iy
				treeignorelist.append(it)
				Pause(600)
				return
			if InJournal("world is saving"):
				ClearJournal()
				Pause(2000)
				break
			
def chop_logs():
	for alllogs in logs:
		while FindType(alllogs, -1, 'backpack'):
			Pause(500)
			UseLayer("TwoHanded")
			WaitForTarget(5000)
			Target('found')
			Pause(1000)
	if boardsbag != 0:
		container = Engine.Items.GetItem(GetAlias('backpack')).Container
		for item in container.GetItems():
			itemg = Graphic(item)
			if itemg in boards:
	  			MoveItem(item.Serial, boardsbag)
	  			Pause(700)
	if Weight() > maxcarryweight:
		SysMessage("Max Weight Reached, halting")
		Stop()
		


while True:
	check_hand()
	tree = GetNearestTree()
	move_tree()
	chop_tree()
	chop_logs()
	if Dead("self"):
		SysMessage("You are dead.")
		Stop()