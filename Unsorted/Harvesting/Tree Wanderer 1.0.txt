from ClassicAssist.UO.Data import Statics
from ClassicAssist.UO import UOMath
from Assistant import Engine
from System import Convert
from Assistant import Engine
from ClassicAssist.UO import UOMath
from ClassicAssist.UO.Data import Direction
import System
import clr
clr.AddReference('System.Core')
clr.ImportExtensions(System.Linq)



def GetNearestTree():
	treeTypes = [0xcd8,0xcd3,0xce6,0xce3,0xcd0,0xccd,0xcda]
	trees = []

	for x in range(Engine.Player.X-10, Engine.Player.X+10):
		for y in range(Engine.Player.Y-10, Engine.Player.Y+10):
			statics = Statics.GetStatics(Convert.ChangeType(Engine.Player.Map, int), x, y)
			if statics != None:
				for s in statics:
					if treeTypes.Contains(s.ID):
						trees.append({'X': s.X, 'Y': s.Y, 'Z': s.Z, 'ID': s.ID, 'Distance': UOMath.Distance(Engine.Player.X, Engine.Player.Y, s.X, s.Y)})
	return trees.OrderBy(lambda i: i['Distance']).FirstOrDefault()

tree = GetNearestTree()
#print tree

#Error "that is too far away"
if tree:
	if tree['X'] > Engine.Player.X and tree['Y'] > Engine.Player.Y:
		locx = tree['X'] - 1
		locy = tree['Y'] - 1
	elif tree['X'] > Engine.Player.X and tree['Y'] == Engine.Player.Y:
		locx = tree['X'] - 1
		locy = tree['Y']
	elif tree['X'] > Engine.Player.X and tree['Y'] < Engine.Player.Y:
		locx = tree['X'] - 1
		locy = tree['Y'] + 1
	elif tree['X'] == Engine.Player.X and tree['Y'] < Engine.Player.Y:
		locx = tree['X'] 
		locy = tree['Y'] + 1
	elif tree['X'] < Engine.Player.X and tree['Y'] < Engine.Player.Y:
		locx = tree['X'] + 1
		locy = tree['Y'] + 1
	elif tree['X'] < Engine.Player.X and tree['Y'] == Engine.Player.Y:
		locx = tree['X'] + 1
		locy = tree['Y'] 
	elif tree['X'] < Engine.Player.X and tree['Y'] > Engine.Player.Y:
		locx = tree['X'] + 1
		locy = tree['Y'] - 1
	elif tree['X'] == Engine.Player.X and tree['Y'] > Engine.Player.Y:
		locx = tree['X'] 
		locy = tree['Y'] - 1
	else:
		HeadMsg("Something went wrong", 'self')
	while Engine.Player.X != locx and Engine.Player.Y != locy:	
		Pathfind(locx, locy, 0)
		Pause(1000)
	UseObject(0x401517fe)
	WaitForTarget(5000)
	TargetXYZ(tree['X'], tree['Y'], tree['Z'], tree['ID'])