from ClassicAssist.UO.Data import Statics
from ClassicAssist.UO import UOMath
from Assistant import Engine
from System import Convert
from Assistant import Engine
from ClassicAssist.UO import UOMath
from ClassicAssist.UO.Data import Direction
import System
import clr
clr.AddReference('System.Core')
clr.ImportExtensions(System.Linq)

#\/__OPTIONS__\/
maxcarryweight = 450
#set boardsbag to 0 if you don't want to place boards in a container
boardsbag = 0x400c4549
#set avgserversavetime to the ms it takes your shard to save
avgserversavetime = 2000
#/\__OPTIONS__/\

treeTypes = [0xcd8,0xcd3,0xce6,0xce3,0xcd0,0xccd,0xcda]
logs = [0x1bdd,0x07da,0x04a7,0x04a8,0x04a9,0x04aa,0x047f]
boards = [0x1bd7]
treeignorelist = []

def GetNearestTree():
	trees = []

	for x in range(Engine.Player.X-32, Engine.Player.X+32):
		for y in range(Engine.Player.Y-32, Engine.Player.Y+32):
			statics = Statics.GetStatics(Convert.ChangeType(Engine.Player.Map, int), x, y)
			if statics != None:
				for s in statics:
					if treeTypes.Contains(s.ID):
						ctlx = str(s.X)
						ctly = str(s.Y)
						ctl = (ctlx + "," + ctly)
						if ctl not in treeignorelist:
							trees.append({'X': s.X, 'Y': s.Y, 'Z': s.Z, 'ID': s.ID, 'Distance': UOMath.Distance(Engine.Player.X, Engine.Player.Y, s.X, s.Y)})
	return trees.OrderBy(lambda i: i['Distance']).FirstOrDefault()

def move_tree():
	if tree != None:
		if tree['X'] > Engine.Player.X and tree['Y'] > Engine.Player.Y:
			locx = tree['X'] - 1
			locy = tree['Y'] - 1
		elif tree['X'] > Engine.Player.X and tree['Y'] == Engine.Player.Y:
			locx = tree['X'] - 1
			locy = tree['Y']
		elif tree['X'] > Engine.Player.X and tree['Y'] < Engine.Player.Y:
			locx = tree['X'] - 1
			locy = tree['Y'] + 1
		elif tree['X'] == Engine.Player.X and tree['Y'] < Engine.Player.Y:
			locx = tree['X'] 
			locy = tree['Y'] + 1
		elif tree['X'] < Engine.Player.X and tree['Y'] < Engine.Player.Y:
			locx = tree['X'] + 1
			locy = tree['Y'] + 1
		elif tree['X'] < Engine.Player.X and tree['Y'] == Engine.Player.Y:
			locx = tree['X'] + 1
			locy = tree['Y'] 
		elif tree['X'] < Engine.Player.X and tree['Y'] > Engine.Player.Y:
			locx = tree['X'] + 1
			locy = tree['Y'] - 1
		elif tree['X'] == Engine.Player.X and tree['Y'] > Engine.Player.Y:
			locx = tree['X'] 
			locy = tree['Y'] - 1
		else:
			HeadMsg("Something went wrong", 'self')
		Pause(400)
		Pathfind(locx, locy, 0)
		Pause(400)
	else:
		SysMessage("Error no tree, Halting")
		Stop()
	while Engine.Player.X != locx and Engine.Player.Y != locy:	
		Pathfind(locx, locy, 0)
		Pause(1000)

def chop_tree():
	while not Dead("self"):
		Pause(100)
		CancelTarget()
		UseLayer("TwoHanded")
		WaitForTarget(5000)
		TargetXYZ(tree['X'], tree['Y'], tree['Z'], tree['ID'])
		SetTimer("backuptimer", 0)
		ClearJournal()
		while not Dead("self"):
			#sometimes it fails to read if skill info is sent too fast
			Pause(400)
			if Timer("backuptimer") > 4000:
				ClearJournal()
				Pause(600)
				break
			if InJournal("You chop some"):
				ClearJournal()
				Pause(600)
				break
			if InJournal("fail to produce"):
				ClearJournal()
				Pause(600)
				break
			if InJournal("not enough wood"):
				ix = str(tree['X'])
				iy = str(tree['Y']) 
				it = ix + "," + iy
				treeignorelist.append(it)
				Pause(600)
				return
			if InJournal("Target cannot be"):
				ix = str(tree['X'])
				iy = str(tree['Y']) 
				it = ix + "," + iy
				treeignorelist.append(it)
				Pause(600)
				return
			if InJournal("is too far"):
				ix = str(tree['X'])
				iy = str(tree['Y']) 
				it = ix + "," + iy
				treeignorelist.append(it)
				Pause(600)
				return
			if InJournal("use an axe on"):
				ix = str(tree['X'])
				iy = str(tree['Y']) 
				it = ix + "," + iy
				treeignorelist.append(it)
				Pause(600)
				return
			if InJournal("world is saving"):
				ClearJournal()
				Pause(2000)
				break
			
def chop_logs():
	for alllogs in logs:
		while FindType(alllogs, -1, 'backpack'):
			Pause(500)
			UseLayer("TwoHanded")
			WaitForTarget(5000)
			Target('found')
			Pause(1000)
	if boardsbag != 0:
		container = Engine.Items.GetItem(GetAlias('backpack')).Container
		for item in container.GetItems():
			itemg = Graphic(item)
			if itemg in boards:
	  			MoveItem(item.Serial, boardsbag)
	  			Pause(700)
	if Weight() > maxcarryweight:
		SysMessage("Max Weight Reached, halting")
		Stop()

loop = True
thing = 0
while loop == True:
	tree = GetNearestTree()
	move_tree()
	chop_tree()
	chop_logs()
	if Dead("self"):
		SysMessage("You are dead.")
		Stop()