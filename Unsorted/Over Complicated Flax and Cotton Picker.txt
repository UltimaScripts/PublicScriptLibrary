# Title: Over Complicated Flax and Cotton Picker
# Description: Pathfinds, Uses and Picks Up Cotton and or Flax
# Author: github.com/UltimaScripts/PublicScriptLibrary
# Usage: Hit play with any cotton or flax on screen
# Version: 1.0.0
import clr
import System
clr.ImportExtensions(System.Linq)
from Assistant import Engine

SetQuietMode(True)
Flax = True
Cotton = True

flaxList = [0x1A99,0x1A9A,0x1A9A,0x1a9B]
flaxbundleList = [0x1A9C,0x1A9D]
cottonList = [0x0C4F,0x0C50,0x0C51,0x0C52,0x0C52,0x0C52]
rawcottonList = [0x0DEF,0x0DF9]

def FindNearest(aa):
    itemz = {}
    items = Engine.Items.Where(lambda i: i.ID in aa and i != None)
    if items == None:
        return None
    for zz in items:
        itemz[zz.Serial] = Distance(zz.Serial)
    return sorted(itemz.items(), key=lambda x:x[1]).FirstOrDefault()

while True:
    near = {}
    if Flax == True:
        flaxa = FindNearest(flaxList)
        if flaxa != None:
            near[flaxa[0]] = flaxa[1]
    if Cotton == True:
        cottona = FindNearest(rawcottonList)
        if cottona != None:
            near[cottona[0]] = cottona[1]
    
    if near:
        thing = sorted(near.items(), key=lambda x:x[1]).FirstOrDefault()
        Pathfind(thing[0])
        while Pathfinding():
            Pause(50)
            #This spams "Entity not found..."
            #if Distance(thing[0]) <= 1:
                #Pathfind(0)
        UseObject(thing[0])
        Pause(800)
        for flaxbundleListz, rawcottonListz in zip(flaxbundleList, rawcottonList):
            while FindType(flaxbundleListz,2) or FindType(rawcottonListz,2):
                MoveItem("found", "backpack")
                Pause(800)
                break
    else:
        Stop()
